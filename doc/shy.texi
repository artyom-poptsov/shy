\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename shy.info
@documentencoding UTF-8
@settitle Shy Reference Manual
@c %**end of header
@include version.texi

@copying
This manual documents Shy version @value{VERSION}.

Copyright (C) 2017 Artyom V. Poptsov

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end copying

@dircategory The Algorithmic Language Scheme
@direntry
* Shy: (Shy).  Guile iCalendar (RFC5545) format parser.
@end direntry

@setchapternewpage odd

@titlepage
@sp 10

@title Shy Reference Manual
@subtitle For Shy @value{VERSION}

@author Artyom V. Poptsov

@page
@vskip 0pt plus 1filll
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@finalout
@headings double

@ifnottex
@node Top, Introduction, (dir), (dir)
@top The Shy Reference Manual

@insertcopying
@sp 1
@end ifnottex

@menu
* Introduction::
* Installation::
* API Reference::
* Tools::

Appendices

* GNU Free Documentation License::  The license of this manual.

@end menu

@contents

@node Introduction
@chapter Introduction

Shy is a @url{https://www.gnu.org/software/guile/, GNU Guile}
library that provides API for iCalendar
@url{https://tools.ietf.org/html/rfc5545, RFC5545} format parsing.

@node Installation
@chapter Installation

Shy sources are available form GitHub at
@url{https://github.com/artyom-poptsov/shy}.  This section
describes Shy requirements and installation process.

Shy depends on the following packages:
@itemize
@item @url{https://www.gnu.org/software/guile/, GNU Guile}, 2.0
@end itemize

To build the latest version of Shy from the sources, you need to
download the sources from GitHub or clone them using Git@footnote{A good
introduction to Git is free Pro Git book, which is available online at
@url{https://git-scm.com/book/en/v2}}.

Cloning can be done as follows:

@example
$ git clone git@@github.com:artyom-poptsov/shy.git
@end example

Next, you should configure the sources:

@example
$ cd shy/
$ autoreconf -vif
$ ./configure
@end example

And finally build and install the library:

@example
$ make
$ make install
@end example

For a basic explanation of the installation of the package, see the
@file{INSTALL} file.

Please @strong{note} that you will need
@url{https://www.gnu.org/software/automake/, Automake} version 1.12 or
later to run self-tests with @command{make check} (but the library
itself can be built with older Automake version such as 1.11).

@strong{important} You probably want to call @command{configure} with
the @option{--with-guilesitedir} option so that this package is
installed in Guile's default path.  But, if you don't know where your
Guile site directory is, run @command{configure} without the option,
and it will give you a suggestion.

@node API Reference
@chapter API Reference

This chapter describes the Shy API.  The first thing that should
be discussed are iCalendar streams.

@section iCalendar streams

Main module for Shy is @code{(ics)}.  The module contains main
procedures for reading and writing iCalendar data.

The data comes in the form of iCalendar streams: these streams consist
of one or more iCalendar objects (described in the next section.)

Example of an iCalendar stream of two iCalendar objects:

@lisp
'(((ICALPROPS ((PRODID . "-//hacksw/handcal//NONSGML v1.0//EN")
               (VERSION . "2.0")))
   (COMPONENT
    ((VEVENT
      (ICALPROPS ())
      (COMPONENT ())))))
  ((ICALPROPS ((PRODID . "-//hacksw/handcal//NONSGML v1.0//EN")
               (VERSION . "2.0")))
   (COMPONENT
    ((VEVENT
      (ICALPROPS ())
      (COMPONENT ()))))))
@end lisp

The procedures below can be used to convert iCalendar streams to Scheme
lists of iCalendar objects and vice versa.

@deffn {Scheme Procedure} ics->scm [port=(current-input-port)]
Convert a iCalendar stream from a @var{port} to a Scheme representation;
return a list of iCalendar objects.
@end deffn

@deffn {Scheme Procedure} ics-string->scm str
Convert an iCalendar string @var{str} to a Scheme representation; return
a list of iCalendar objects.
@end deffn

@deffn {Scheme Procedure} ics-pretty-print ical-object [port=(current-output-port)] [#:indent=2]
Pretty-print an @var{ical-object} to a @var{port}.  Note that the output
is intended for human to comprehent, not to a machine to parse.
@end deffn

@deffn {Scheme Procedure} scm->ics ical-object [port=(current-output-port)]
Convert an @var{ical-object} to iCalendar format.  Print the output to a
@var{port}.
@end deffn

@deffn {Scheme Procedure} scm->ics-string ical-object
Convert an @var{ical-object} to an iCalendar format string; return the
string.
@end deffn

@deffn {Scheme Procedure} ics->stream [port (current-input-port)]
Convert an ICS stream from a @var{port} to an SRFI-41 stream
(@pxref{SRFI-41,,, guile, The GNU Guile Reference Manual}).  Return the
stream.

Example:

@lisp
(use-modules (srfi srfi-41)
             (ice-9 pretty-print)
             (ics))

(let ((p (open-input-file "data.ics")))
  (stream-for-each (lambda (ical-object)
                     (pretty-print ical-object))
                   (ics->stream p)))
@end lisp

@end deffn

@section iCalendar objects

iCalendar streams consist of one or more iCalendar objects.  One
iCalendar object looks as follows:

@lisp
'((ICALPROPS
   ((PRODID . "-//hacksw/handcal//NONSGML v1.0//EN")
    (VERSION . "2.0")))
  (COMPONENT
   ((VEVENT
     (ICALPROPS
      ((SUMMARY . "Bastille Day Party")
       (DTEND . "19970715T040000Z")
       (DTSTART . "19970714T170000Z")
       (DTSTAMP . "19970610T172345Z")
       (UID . "19970610T172345Z-AF23B2@@example.com")))
     (COMPONENT ())))))
@end lisp

As you can see from the example above, each iCalendar object has an
alist of properties and an alist of one or more components.  In turn,
each component is an iCalendar object on its own; that means that this
data structure can be handled recusively.

@deffn {Scheme Procedures} make-ical-object icalprops component
Make an iCalendar object from an @var{icalprops} and @var{component}
alists.
@end deffn

@deffn {Scheme Procedures} ical-object-icalprops ical-object
Get iCalendar properties from an @var{ical-object}.
@end deffn

@deffn {Scheme Procedures} ical-object-component ical-object
Get an iCalendar component alist from @var{ical-object}.
@end deffn

@section Converters

@code{(ics conv)} module provides procedures for converting iCalendar
objects to other formats.

@deffn {Scheme Procedure} ical-object->org-mode ical-object [port=(current-output-port)]
Convert an @var{ical-object} to org-mode format (@pxref{Top,,, org,
Org Mode Manual}) and print the results to a @var{port}.
@end deffn

@section Examples

See the @file{examples} directory.

@node Tools
@chapter Tools

There is a tool called @command{ics} that allows to handle iCalendar
data.

The default behaviour of the program is to read a iCalendar stream from
stdin and pretty-print it to the stdout.

See @command{ics --help} for usage information.

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@bye