#!/bin/bash

### shy -- A handy tool to inspect Bash scripts.

# Copyright (C) 2015 Artyom V. Poptsov <poptsov.artyom@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

### Commentary:

# A handy tool to inspect Bash scripts.
#
# Requirements:
#   - awk
#   - sed
#   - realpath
#   - grep

### Code:

SECTION_COMMENTARY="### Commentary:"
SECTION_CODE="### Code:"

# Print commentary section from a FILE.
#
# Syntax:
#   print_commentary_section file
print_commentary_section() {
    local file=$1

    awk "/^${SECTION_COMMENTARY}/{flag=1; next}/^${SECTION_CODE}/{flag=0}flag" \
        $file
}

# Print copyright section from a FILE.
#
# Syntax:
#   print_copyright_section file
print_copyright_section() {
    local file=$1
    awk "/^# Copyright /{flag=1}/^${SECTION_COMMENTARY}/{flag=0}flag" $file
}

### deps

# Get dependencies from a FILE.
#
# Syntax:
#   get_deps file
get_deps() {
    local file=$1
    grep -E "^\. .*|^source .*" $file | sed -r 's/^.* (.*)/\1/'
}

# Get value of a variable VAR_NAME from a FILE.
#
# Syntax:
#   get_var_value file var_name
get_var_value() {
    local file="$1"
    local var_name="$2"
    grep "^$var_name" "$file" | sed -r 's/.*=(.*)/\1/'
}

# Return 'true' if a STRING begins from a plain variable (like
# '$VAR'), false otherwise.
#
# Syntax:
#   plain_var_p string
plain_var_p() {
    echo "$1" | grep -E '^\${.*}' > /dev/null && echo true || echo false
}

# Return 'true' if a STRING begins from a variable wrapped in curly
# brackets (like '${VAR}').
#
# Syntax:
#   curly_brackets_var_p string
curly_brackets_var_p() {
    echo "$1" | grep -E '^\$[A-Za-z]+\/.*' > /dev/null \
        && echo true || echo false
}

# Try to expand variables contained in a STRING path using a FILE to
# look up the variables.
#
# Syntax:
#   expand_vars file string
expand_vars() {
    local file="$1"
    local string="$2"
    local var_name var_value result
    local home=$(echo $HOME | sed 's/[[\.*/]/\\&/g; s/$$/\\&/; s/^^/\\&/')

    if [ $(plain_var_p "$string") = true ]; then
        var_name=$(echo "$string" | sed -r 's/\$\{([A-Za-z]+)\}.*/\1/')

        var_value=$(get_var_value "$file" "$var_name" \
                           | sed 's/[[\.*/]/\\&/g; s/$$/\\&/; s/^^/\\&/')
        result=$(echo "$string" \
                        | sed -r 's/^\$\{.*\}(.*)/'${var_value}'\1/')

        # Expand home path
        result=$(echo "$result" | sed -r "s/^~(.*)/${home}\1/")

        echo "$result"
        return 0
    elif [ $(curly_brackets_var_p "$string") = true ]; then
        var_name=$(echo "$string" | sed -r 's/\$([A-Za-z]+)\/.*/\1/')
        var_value=$(get_var_value "$file" "$var_name" \
                           | sed 's/[[\.*/]/\\&/g; s/$$/\\&/; s/^^/\\&/')
        result=$(echo "$string" \
                        | sed -r 's/.*\$[A-Za-z]+(\/.*)/'${var_value}'\1/')

        # Expand home path
        result=$(echo "$result" | sed -r "s/^~(.*)/${home}\1/")

        echo "$result"
        return 0
    else
        echo "$string"
        return 1
    fi
}

# Try to expand a FILE path if contains variables and/or '~'.
#
# Syntax:
#   expand_path file dep
expand_path() {
    local file="$1"
    local dep="$2"

    if [ $(echo "$dep" | grep "^\$.*" > /dev/null; echo $?) = "0" ]; then
        echo $(expand_vars "$file" "$dep")
    else
        echo "$dep"
    fi
}

# Print script dependencies on other scripts that are sourced.
#
# Syntax:
#   print_deps file [indent]
print_deps() {
    local file=$1
    local indent=$([ "$2" = "" ] && echo 0 || echo $2)
    local IFS=$'\n'
    local deps dep

    printf "%${indent}s%s\n" '' $file

    local filepath=$([ -e "$file" ] && realpath "$file" || echo "")

    if [ ! -z "$filepath" ]; then
        deps=($(get_deps $file))

        cd $(dirname $file)

        for ((i = 0; i < ${#deps[*]}; ++i)); do
            dep=$(expand_path "$filepath" "${deps[$i]}")
            # echo $dep >&2
            echo "$(print_deps "$dep" $((indent + 2)))"
        done
    fi
}

### inspect
# Inspect bash scripts for potentially problematic things.

# Print alert message.
#
# Syntax:
#   alert str1 str2 ...
alert() {
    echo -e "\033[0;37m$@\033[0m"
}

# Inspect a FILE for backticks.
#
# Rationale: <http://mywiki.wooledge.org/BashFAQ/082>
#
# Syntax:
#   inspect_backticks file
inspect_backticks() {
    local file=$1
    local IFS=$'\n'
    local matches=($(grep -n '`.*`' $file))
    local matches_count=${#matches[*]}
    if [ ! "$matches_count" = "0" ]; then
        alert "Backticks: found ${matches_count} match(es)"\
              "-- <http://mywiki.wooledge.org/BashFAQ/082>"
        for ((i = 0; i < ${#matches[*]}; ++i)); do
            printf '\t%s\n' ${matches[$i]}
        done
        return 1
    else
        return 0
    fi
}

# Inspect a FILE for mixed usage of 'function' keyword and
# parentheses.
#
# Rationale: <http://wiki.bash-hackers.org/scripting/obsolete>
#
# Syntax:
#   inspect_function_keywords file
inspect_function_keywords() {
    local file=$1
    local IFS=$'\n'
    local matches=($(grep -n 'function .*\(\).*{' $file))
    local matches_count=${#matches[*]}
    if [ ! "$matches_count" = "0" ]; then
        alert "'function' keyword is used along with parentheses:" \
              "found ${matches_count} match(es)"\
              "-- <http://wiki.bash-hackers.org/scripting/obsolete>"
        for ((i = 0; i < ${#matches[*]}; ++i)); do
            printf '\t%s\n' ${matches[$i]}
        done
        return 1
    else
        return 0
    fi
}

# Inspect a FILE for $[EXPRESSION] syntax.
#
# Rationale: <http://wiki.bash-hackers.org/scripting/obsolete>
#
# Syntax:
#   inspect_square_brackets_expression file
inspect_square_brackets_expression() {
    local file=$1
    local IFS=$'\n'
    local matches=($(grep -n '\$\[[^\[].*\]' $file))
    local matches_count=${#matches[*]}
    if [ ! "$matches_count" = "0" ]; then
        alert "\$[EXPRESSION]:" \
              "found ${matches_count} match(es)"\
              "-- <http://wiki.bash-hackers.org/scripting/obsolete>"
        for ((i = 0; i < ${#matches[*]}; ++i)); do
            printf '\t%s\n' ${matches[$i]}
        done
        return 1
    else
        return 0
    fi
}

# Inspect a FILE.
#
# Syntax:
#   inspect file
inspect() {
    local file=$1
    inspect_backticks $file
    inspect_function_keywords $file
    inspect_square_brackets_expression $file
}

###

# Print help message and exit.
#
# Syntax:
#   print_help_and_exit
print_help_and_exit() {
    cat <<EOF
Usage: shy command [args]

Commands:
  help, h        Print this message and exit.
  commentary, c  Print commentary.
  copyright, C   Print copyright.
  deps, d        Print dependency tree of scripts that are sourced from
                 the script.
  inspect, i     Inspect the script for issues
                 (NOTE: this is HIGHLY experimental feature)
EOF
}

###

# Entry point of the program.
#
# Syntax:
#   main
main() {
    local command=$1

    [ -z "$command" ] && print_help_and_exit

    case $command in
        commentary | c)
            shift 1
            print_commentary_section $*
            ;;
        copyright | C)
            shift 1
            print_copyright_section $*
            ;;
        deps | d)
            shift 1
            print_deps $*
            ;;
        inspect | i)
            shift 1
            inspect $*
            ;;
        help | h)
            print_help_and_exit
            ;;
    esac

    exit 0
}

main $*

### shy ends here.
